{
  "version": 3,
  "sources": ["../../../../../apps/payment_integration_utils/payment_integration_utils/public/js/utils.js", "../../../../../apps/payment_integration_utils/payment_integration_utils/public/js/auth.js"],
  "sourcesContent": ["frappe.provide(\"payment_integration_utils\");\n\nconst PAYMENT_AUTHORIZER = \"Online Payments Authorizer\";\nconst PAY_ICON = \"expenses\";\nconst PAYMENT_TRANSFER_METHOD = {\n    NEFT: \"NEFT\",\n    IMPS: \"IMPS\",\n    RTGS: \"RTGS\",\n    UPI: \"UPI\",\n    LINK: \"Link\",\n};\n\nObject.assign(payment_integration_utils, {\n    PAYMENT_AUTHORIZER,\n    PAYMENT_TRANSFER_METHOD,\n    PAY_ICON,\n\n    get_date_in_user_fmt(date) {\n        return frappe.datetime.str_to_user(date, null, frappe.datetime.get_user_date_fmt());\n    },\n\n    can_user_authorize_payment() {\n        return (\n            frappe.session.user !== \"Administrator\" &&\n            frappe.user.has_role(PAYMENT_AUTHORIZER) &&\n            frappe.perm.has_perm(\"Payment Entry\", 0, \"submit\")\n        );\n    },\n\n    user_has_payment_permissions(frm) {\n        if (frm.doc.__onload) {\n            return this.get_onload(frm, \"has_payment_permission\");\n        }\n\n        return this.can_user_authorize_payment();\n    },\n\n    set_onload(frm, key, value) {\n        if (!frm.doc.__onload) {\n            frm.doc.__onload = {};\n        }\n\n        frm.doc.__onload[key] = value;\n    },\n\n    get_onload(frm, key) {\n        return frm.doc && frm.doc.__onload ? frm.doc.__onload[key] : undefined;\n    },\n\n    reset_values(frm, ...fields) {\n        fields.forEach((field) => frm.set_value(field, \"\"));\n    },\n\n    async get_employee_contact_details(employee) {\n        const { message } = await frappe.db.get_value(\"Employee\", employee, [\n            \"cell_number as contact_mobile\",\n            \"prefered_email as contact_email\",\n        ]);\n\n        return message;\n    },\n\n    is_already_paid(frm) {\n        return this.get_onload(frm, \"is_already_paid\");\n    },\n\n    validate_payment_transfer_method(method, amount) {\n        if ([PAYMENT_TRANSFER_METHOD.NEFT, PAYMENT_TRANSFER_METHOD.LINK].includes(method)) return;\n\n        if (method === PAYMENT_TRANSFER_METHOD.IMPS && amount > 5_00_000) {\n            frappe.throw({\n                message: __(\"Amount should be less than {0} for <strong>{1}</strong> transfer\", [\n                    format_currency(5_00_000, \"INR\"),\n                    PAYMENT_TRANSFER_METHOD.IMPS,\n                ]),\n                title: __(\"Amount Limit Exceeded\"),\n            });\n        } else if (method === PAYMENT_TRANSFER_METHOD.UPI && amount > 1_00_000) {\n            frappe.throw({\n                message: __(\"Amount should be less than {0} for <strong>{1}</strong> transfer\", [\n                    format_currency(1_00_000, \"INR\"),\n                    PAYMENT_TRANSFER_METHOD.UPI,\n                ]),\n                title: __(\"Amount Limit Exceeded\"),\n            });\n        } else if (method === PAYMENT_TRANSFER_METHOD.RTGS && amount < 2_00_000) {\n            frappe.throw({\n                message: __(\"Amount should be greater than {0} for <strong>{1}</strong> transfer\", [\n                    format_currency(2_00_000, \"INR\"),\n                    PAYMENT_TRANSFER_METHOD.RTGS,\n                ]),\n                title: __(\"Insufficient Amount\"),\n            });\n        }\n    },\n});\n", "const AUTH_METHODS = {\n    OTP_APP: \"OTP App\",\n    // TODO: @Implement SMS and Email\n    // SMS: \"SMS\",\n    // EMAIL: \"Email\",\n};\n\nconst AUTH_MODULE = \"payment_integration_utils.payment_integration_utils.utils.auth\";\n\nObject.assign(payment_integration_utils, {\n    // ################ CONSTANTS ################ //\n    AUTH_METHODS,\n\n    AUTH_MODULE,\n\n    // ################ UTILITIES ################ //\n    /**\n     * Authenticate payment entries.\n     *\n     * Note: Only single OTP is generated for all the payment entries.\n     *\n     * @param {string | string[]} payment_entries - Payment Entry name or list of names\n     * @param {Function} callback - Callback function to be executed after successful authentication\n     */\n    async authenticate_payment_entries(payment_entries, callback) {\n        const get_otp_description = (generation_details) => {\n            if (generation_details.setup) return __(generation_details.prompt);\n\n            return `<bold class='text-danger font-weight-bold'>\n\t\t\t\t\t\t${frappe.utils.icon(\"solid-error\")} &nbsp;\n\t\t\t\t\t\t${__(\"There is some error! Please contact your Administrator.\")}\n\t\t\t\t\t</bold>`;\n        };\n\n        if (typeof payment_entries === \"string\") {\n            payment_entries = [payment_entries];\n        }\n\n        const generation_details = await this.generate_otp(payment_entries);\n        if (!generation_details) return;\n\n        const dialog = new frappe.ui.Dialog({\n            title: __(\"Enter OTP\"),\n            fields: [\n                {\n                    fieldname: \"otp\",\n                    label: __(\"OTP\"),\n                    fieldtype: \"Data\",\n                    description: get_otp_description(generation_details),\n                    reqd: 1,\n                },\n            ],\n            minimizable: true,\n            primary_action_label: __(\"Enter\"),\n            primary_action: async (values) => {\n                const { verified, message } = await this.verify_otp(\n                    values.otp.trim(),\n                    generation_details.auth_id\n                );\n\n                if (verified) {\n                    dialog.hide();\n\n                    callback && callback(generation_details.auth_id);\n                    return;\n                }\n\n                // Invalid OTP\n                const error = `<p class=\"text-danger font-weight-bold\">\n\t\t\t\t\t\t\t\t\t${frappe.utils.icon(\"solid-error\")} &nbsp;\n\t\t\t\t\t\t\t\t\t${__(message || \"Invalid! Please try again.\")}\n\t\t\t\t\t\t\t\t</p>`;\n\n                const otp_field = dialog.get_field(\"otp\");\n                otp_field.set_new_description(error);\n\n                // reset the description to the original\n                setTimeout(() => {\n                    otp_field.set_new_description(otp_field.df.description);\n                }, 3000);\n            },\n        });\n\n        dialog.show();\n    },\n\n    /**\n     * Generate OTP for the given payment entries.\n     *\n     * Note: Only single OTP is generated for all the payment entries.\n     *\n     * @param {string[]} payment_entries List of Payment Entry names\n     *\n     * ---\n     * One Example Response:\n     * ```js\n     * {\n     * \tmethod: \"OTP App\",\n     *  auth_id: \"12345678\",\n     * \tsetup: true,\n     * \tprompt: \"Enter verification code from your OTP app\",\n     * }\n     * ```\n     */\n    async generate_otp(payment_entries) {\n        const response = await frappe.call({\n            method: `${AUTH_MODULE}.generate_otp`,\n            args: {\n                payment_entries,\n            },\n            freeze: true,\n            freeze_message: __(\"Please wait...\"),\n        });\n\n        return response?.message;\n    },\n\n    /**\n     * Verify the otp for the given auth_id.\n     *\n     * @param {string} otp OTP\n     * @param {string} auth_id Authentication ID\n     *\n     * ---\n     * Example Response:\n     * ```js\n     * {\n     * \tverified: true,\n     * \tmessage: \"OTP verified successfully.\",\n     * }\n     * ```\n     */\n    async verify_otp(otp, auth_id) {\n        const response = await frappe.call({\n            method: `${AUTH_MODULE}.verify_otp`,\n            args: { otp, auth_id },\n            freeze: true,\n            freeze_message: __(\"Verifying OTP...\"),\n        });\n\n        return response?.message;\n    },\n});\n"],
  "mappings": "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",
  "names": ["generation_details"]
}
